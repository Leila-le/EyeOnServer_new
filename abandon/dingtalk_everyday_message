            schedule_send_alert_am9()  # 每日定时简报


def get_message():
    """
    获取服务器基础信息的消息内容
    :return:服务器基础信息的消息内容
    """
    # 从SeverInfo中获取唯一的许可名称
    unique_license_names = SeverInfo.objects.values_list('license_name', flat=True).distinct()
    # 从SeverInfo中获取唯一的服务器名称
    unique_names = SeverInfo.objects.values_list('name', flat=True).distinct()
    # 遍历唯一的许可证名称和服务器名称
    for unique_license_name in unique_license_names:
        for unique_name in unique_names:
            # 查询服务器信息
            server_info_list = SeverInfo.objects.filter(license_name=unique_license_name,
                                                        name=unique_name).order_by('time')
            # 遍历results_five并获取每个对象的loadavg属性
            for info in server_info_list:
                base_info = f"""> 您的云服务器已运行-{info.uptime}，
                        <br>- 目前CPU使用率为：{info.percent}%，
                        <br>- 系统运行内存使用率为：{info.memory_percent}%，
                        <br>- 剩余可用运行内存为：{float(info.free_physics) / (1024 * 1024 * 1024)}GiB，
                        <br>- 系统存储内存使用率为：{info.disk_percent}%，
                        <br>- 剩余可用存储内存为：{float(info.free) / (1024 * 1024 * 1024)}GiB,
                        <br>**{'机器CPU使用率正常' if float(info.percent) <= 80 else '机器CPU使用率过高，可能触发预警'}**
                        <br>**{'机器内存使用率正常' if float(info.memory_percent) <= 80 else '机器内存使用率过高，可能触发预警'}**
                        <br>**{'机器磁盘使用率正常' if float(info.disk_percent) <= 80 else '机器磁盘使用率过高，可能触发预警'}**
                        """
                return base_info

def send_alert_am9():
    """
    获取当前时间,构建要发送的消息
    :return: None
    """
    message = get_message()
    xiao_ding.send_markdown("服务器基础信息", message)


def schedule_send_alert_am9():
    """
    设置每天9点执行发送消息的定时器
    :return: None
    """
    global timer_
    if timer_ is not None and timer_.is_alive():
        return

    now = datetime.datetime.now()  # 获取当前时间
    # 设置今天的上午9点的目标触发时间
    target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)
    # 如果已经过了今天9点则将触发时间定位明天9点
    if now >= target_time:
        target_time += datetime.timedelta(days=1)
    # 计算时间间隔（以秒为单位）
    delay = (target_time - now).total_seconds()
    # 启动定时器，在明天的9点执行send_alert_am9函数
    timer_ = threading.Timer(delay, send_alert_am9)
    timer_.start()
