 
def get_warning(alerts):
    # infos = SeverInfo.objects.all()
    # for alerts in infos:
    received_time = datetime.datetime.now()
    formatted_datetime = received_time.strftime("%Y-%m-%d %H:%M:%S")
    # 设置阈值，用于比较
    cpu_threshold = 80
    memory_threshold = 80
    disk_threshold = 80
    # 初始化消息列表和标志变量
    messages = []
    flag = False
    # 检查CPU使用率是否超过阈值
    if alerts['percent'] > cpu_threshold:
        message = f"\n系统: {alerts['name']}\n许可:{alerts['license_name']}\n时间:{formatted_datetime}\n" \
                  f"这段时间内CPU最高使用率: {alerts['percent']}%"
        messages.append(message)
        flag = True
    # 检查内存使用率是否超过阈值
    if alerts['memory_percent'] > memory_threshold:
        if flag:
            message = f"\n这段时间内内存最高使用率: {alerts['memory_percent']}%"

        else:
            message = f"\n系统: {alerts['name']}\n许可:{alerts['license_name']}\n时间:{formatted_datetime}\n" \
                      f"这段时间内内存最高使用率: {alerts['memory_percent']}%"
        messages.append(message)
        flag = True
    # 检查磁盘使用率是否超过阈值
    if alerts['disk_percent'] > disk_threshold:
        if flag:
            message = f"\n这段时间内磁盘最高使用率: {alerts['disk_percent']}%"
        else:
            message = f"\n系统: {alerts['name']}\n许可:{alerts['license_name']}\n时间:{formatted_datetime}\n" \
                      f"这段时间内磁盘最高使用率: {alerts['disk_percent']}%"
        messages.append(message)
    # 将当前收集到的超过阈值的内容传至send_alert_to_dingtalk进行发送钉钉消息准备
    if messages:
        process_message("".join(messages))
